syntax = "proto3";

package softtrans.coordinator.tcc;
option go_package = "contract";

// TCCService comment
service TCCService {
    // Begin a transaction
    rpc BeginTrans (BeginTransRequest) returns (BeginTransResponse);

    // Try a step
    rpc TryStep (TryStepRequest) returns (TryStepResponse);

    // Confirm a transaction
    rpc ConfirmTrans (ConfirmTransRequest) returns (ConfirmTransResponse);

    // Mark a transaction confirmed
    rpc ConfirmTransSuccess (ConfirmTransSuccessRequest) returns (ConfirmTransSuccessResponse);

    // Start rolling back a transaction
    rpc CancelTrans (CancelTransRequest) returns (CancelTransResponse);

    // Mark a transaction rolled back
    rpc CancelTransSuccess (CancelTransSuccessRequest) returns (CancelTransSuccessResponse);

    // Get info of the transaction
    rpc GetTrans (GetTransRequest) returns (GetTransResponse);

    // Get expired transactions
    rpc GetExpiredTransList (GetExpiredTransListRequest) returns (GetExpiredTransListResponse);

    // Get confirming transactions
    rpc GetConfirmingTransList (GetConfirmingTransListRequest) returns (GetConfirmingTransListResponse);

    // Get cancelling transactions
    rpc GetCancellingTransList (GetCancellingTransListRequest) returns (GetCancellingTransListResponse);

}

service TCCResourceManagerService {

    // Confirm (require idempotent)
    rpc Confirm(RMConfirmTransRequest) returns(RMConfirmTransResponse);

    // Cancel (require idempotent)
    rpc Cancel(RMCancelTransRequest) returns(RMCancelTransResponse);
}

message TransactionId {
    // Identifier of app
    string appId = 1;
    // Business Code
    string busCode = 2;
    // Business transactionId
    string trxId = 3;
}

message TransactionStep {
    string stepId = 1;
    repeated bytes args = 2;
    string serverName = 3;
    string serviceName = 4;
    string confirmMethodName = 5;
    string cancelMethodName = 6;
    string clientName = 7;
}

message Transaction {
    TransactionId transactionId = 1;
    string transUniqId = 2;
    repeated TransactionStep steps = 3;
    enum TransactionStatus {
        NotSet = 0;
        Trying = 10;
        Confirming = 20;
        Confirmed = 30;
        Cancelling = 40;
        Cancelled = 50;
    }
    TransactionStatus status = 4;
}

message BeginTransRequest {
    TransactionId transactionId = 1;
    // 为true时，如果协调器发现已经有相同TransactionId的事务存在，将返回错误 DuplicateRequest
    // 为false时，如果协调器发现已经有相同TransactionId的事务存在，将返回已经存在的事务
    bool failFast = 2;
    // 事务过期时长(单位:秒)
    int32 expireTimeSeconds = 3;
}

message BeginTransResponse {
    string transUniqId = 1;
    enum BeginTransResponseErrorCode {
        OK = 0;
        InvalidAppId = 1001;
        EmptyBusCode = 1002;
        EmptyTRXId = 1003;
        DuplicateRequest = 1010;
    }
}

message TryStepRequest {
    string transUniqId = 1;
    TransactionStep step = 2;
}

message TryStepResponse {
    string transUniqId = 1;
    string stepId = 2;
    enum TryStepResponseErrorCode {
        OK = 0;
        EmptyTransUniqId = 1001;
        InvalidStepInfo = 1002;
        TransactionNotFound = 1010;
        TransactionStatusError = 1011;
    }
}

message ConfirmTransRequest {
    string transUniqId = 1;
}

message ConfirmTransResponse {
    string transUniqId = 1;
    enum ConfirmTransResponseErrorCode {
        OK = 0;
        EmptyTransUniqId = 1001;
        TransactionNotFound = 1010;
        TransactionStatusError = 1011;
    }
}

message ConfirmTransSuccessRequest {
    string transUniqId = 1;
}

message ConfirmTransSuccessResponse {
    string transUniqId = 1;
    enum ConfirmTransSuccessResponseErrorCode {
        OK = 0;
        EmptyTransUniqId = 1001;
        TransactionNotFound = 1010;
        TransactionStatusError = 1011;
    }
}

message CancelTransRequest {
    string transUniqId = 1;
}

message CancelTransResponse {
    string transUniqId = 1;
    enum CancelTransResponseErrorCode {
        OK = 0;
        EmptyTransUniqId = 1001;
        TransactionNotFound = 1010;
        TransactionStatusError = 1011;
    }
}

message CancelTransSuccessRequest {
    string transUniqId = 1;
}

message CancelTransSuccessResponse {
    string transUniqId = 1;
    enum CancelTransSuccessResponseErrorCode {
        OK = 0;
        EmptyTransUniqId = 1001;
        TransactionNotFound = 1010;
        TransactionStatusError = 1011;
    }
}

message GetTransRequest {
    string transUniqId = 1;
}

message GetTransResponse {
    Transaction transaction = 1;
    enum GetTransResponseErrorCode {
        OK = 0;
//        InvalidAppId = 1001;
//        EmptyBusCode = 1002;
//        EmptyTRXId = 1003;
        EmptyTransUniqId = 1010;
    }
}

message GetExpiredTransListRequest {
    int32 topN = 1;
}

message GetExpiredTransListResponse {
    repeated string transUniqIds = 1;
}

message GetConfirmingTransListRequest {
    int32 topN = 1;
}

message GetConfirmingTransListResponse {
    repeated Transaction transactions = 1;
}

message GetCancellingTransListRequest {
    int32 topN = 1;
}

message GetCancellingTransListResponse {
    repeated Transaction transactions = 1;
}

message RMConfirmTransRequest {
    TransactionId transactionId = 1;
    TransactionStep step = 2;
}

message RMConfirmTransResponse {
    TransactionId transactionId = 1;
    string stepId = 2;
}

message RMCancelTransRequest {
    TransactionId transactionId = 1;
    TransactionStep step = 2;
}

message RMCancelTransResponse {
    TransactionId transactionId = 1;
    string stepId = 2;
}