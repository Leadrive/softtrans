// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tcc_coordinator.proto

/*
	Package contract is a generated protocol buffer package.

	It is generated from these files:
		tcc_coordinator.proto

	It has these top-level messages:
		TransactionId
		TransactionStep
		Transaction
		BeginTransRequest
		BeginTransResponse
		TryStepRequest
		TryStepResponse
		ConfirmTransRequest
		ConfirmTransResponse
		ConfirmTransSuccessRequest
		ConfirmTransSuccessResponse
		CancelTransRequest
		CancelTransResponse
		CancelTransSuccessRequest
		CancelTransSuccessResponse
		GetTransRequest
		GetTransResponse
		GetExpiredTransListRequest
		GetExpiredTransListResponse
		GetConfirmingTransListRequest
		GetConfirmingTransListResponse
		GetCancellingTransListRequest
		GetCancellingTransListResponse
		RMConfirmTransRequest
		RMConfirmTransResponse
		RMCancelTransRequest
		RMCancelTransResponse
*/
package contract

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Transaction_TransactionStatus int32

const (
	Transaction_Trying     Transaction_TransactionStatus = 0
	Transaction_Confirming Transaction_TransactionStatus = 10
	Transaction_Confirmed  Transaction_TransactionStatus = 20
	Transaction_Cancelling Transaction_TransactionStatus = 30
	Transaction_Cancelled  Transaction_TransactionStatus = 40
)

var Transaction_TransactionStatus_name = map[int32]string{
	0:  "Trying",
	10: "Confirming",
	20: "Confirmed",
	30: "Cancelling",
	40: "Cancelled",
}
var Transaction_TransactionStatus_value = map[string]int32{
	"Trying":     0,
	"Confirming": 10,
	"Confirmed":  20,
	"Cancelling": 30,
	"Cancelled":  40,
}

func (x Transaction_TransactionStatus) String() string {
	return proto.EnumName(Transaction_TransactionStatus_name, int32(x))
}
func (Transaction_TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{2, 0}
}

type BeginTransResponse_BeginTransResponseErrorCode int32

const (
	BeginTransResponse_OK               BeginTransResponse_BeginTransResponseErrorCode = 0
	BeginTransResponse_InvalidAppId     BeginTransResponse_BeginTransResponseErrorCode = 1001
	BeginTransResponse_EmptyBusCode     BeginTransResponse_BeginTransResponseErrorCode = 1002
	BeginTransResponse_EmptyTRXId       BeginTransResponse_BeginTransResponseErrorCode = 1003
	BeginTransResponse_DuplicateRequest BeginTransResponse_BeginTransResponseErrorCode = 1010
)

var BeginTransResponse_BeginTransResponseErrorCode_name = map[int32]string{
	0:    "OK",
	1001: "InvalidAppId",
	1002: "EmptyBusCode",
	1003: "EmptyTRXId",
	1010: "DuplicateRequest",
}
var BeginTransResponse_BeginTransResponseErrorCode_value = map[string]int32{
	"OK":               0,
	"InvalidAppId":     1001,
	"EmptyBusCode":     1002,
	"EmptyTRXId":       1003,
	"DuplicateRequest": 1010,
}

func (x BeginTransResponse_BeginTransResponseErrorCode) String() string {
	return proto.EnumName(BeginTransResponse_BeginTransResponseErrorCode_name, int32(x))
}
func (BeginTransResponse_BeginTransResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{4, 0}
}

type TryStepResponse_TryStepResponseErrorCode int32

const (
	TryStepResponse_OK                     TryStepResponse_TryStepResponseErrorCode = 0
	TryStepResponse_EmptyTransUniqId       TryStepResponse_TryStepResponseErrorCode = 1001
	TryStepResponse_InvalidStepInfo        TryStepResponse_TryStepResponseErrorCode = 1002
	TryStepResponse_TransactionNotFound    TryStepResponse_TryStepResponseErrorCode = 1010
	TryStepResponse_TransactionStatusError TryStepResponse_TryStepResponseErrorCode = 1011
)

var TryStepResponse_TryStepResponseErrorCode_name = map[int32]string{
	0:    "OK",
	1001: "EmptyTransUniqId",
	1002: "InvalidStepInfo",
	1010: "TransactionNotFound",
	1011: "TransactionStatusError",
}
var TryStepResponse_TryStepResponseErrorCode_value = map[string]int32{
	"OK":                     0,
	"EmptyTransUniqId":       1001,
	"InvalidStepInfo":        1002,
	"TransactionNotFound":    1010,
	"TransactionStatusError": 1011,
}

func (x TryStepResponse_TryStepResponseErrorCode) String() string {
	return proto.EnumName(TryStepResponse_TryStepResponseErrorCode_name, int32(x))
}
func (TryStepResponse_TryStepResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{6, 0}
}

type ConfirmTransResponse_ConfirmTransResponseErrorCode int32

const (
	ConfirmTransResponse_OK                     ConfirmTransResponse_ConfirmTransResponseErrorCode = 0
	ConfirmTransResponse_EmptyTransUniqId       ConfirmTransResponse_ConfirmTransResponseErrorCode = 1001
	ConfirmTransResponse_TransactionNotFound    ConfirmTransResponse_ConfirmTransResponseErrorCode = 1010
	ConfirmTransResponse_TransactionStatusError ConfirmTransResponse_ConfirmTransResponseErrorCode = 1011
)

var ConfirmTransResponse_ConfirmTransResponseErrorCode_name = map[int32]string{
	0:    "OK",
	1001: "EmptyTransUniqId",
	1010: "TransactionNotFound",
	1011: "TransactionStatusError",
}
var ConfirmTransResponse_ConfirmTransResponseErrorCode_value = map[string]int32{
	"OK":                     0,
	"EmptyTransUniqId":       1001,
	"TransactionNotFound":    1010,
	"TransactionStatusError": 1011,
}

func (x ConfirmTransResponse_ConfirmTransResponseErrorCode) String() string {
	return proto.EnumName(ConfirmTransResponse_ConfirmTransResponseErrorCode_name, int32(x))
}
func (ConfirmTransResponse_ConfirmTransResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{8, 0}
}

type ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode int32

const (
	ConfirmTransSuccessResponse_OK                     ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode = 0
	ConfirmTransSuccessResponse_EmptyTransUniqId       ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode = 1001
	ConfirmTransSuccessResponse_TransactionNotFound    ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode = 1010
	ConfirmTransSuccessResponse_TransactionStatusError ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode = 1011
)

var ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode_name = map[int32]string{
	0:    "OK",
	1001: "EmptyTransUniqId",
	1010: "TransactionNotFound",
	1011: "TransactionStatusError",
}
var ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode_value = map[string]int32{
	"OK":                     0,
	"EmptyTransUniqId":       1001,
	"TransactionNotFound":    1010,
	"TransactionStatusError": 1011,
}

func (x ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode) String() string {
	return proto.EnumName(ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode_name, int32(x))
}
func (ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{10, 0}
}

type CancelTransResponse_CancelTransResponseErrorCode int32

const (
	CancelTransResponse_OK                     CancelTransResponse_CancelTransResponseErrorCode = 0
	CancelTransResponse_EmptyTransUniqId       CancelTransResponse_CancelTransResponseErrorCode = 1001
	CancelTransResponse_TransactionNotFound    CancelTransResponse_CancelTransResponseErrorCode = 1010
	CancelTransResponse_TransactionStatusError CancelTransResponse_CancelTransResponseErrorCode = 1011
)

var CancelTransResponse_CancelTransResponseErrorCode_name = map[int32]string{
	0:    "OK",
	1001: "EmptyTransUniqId",
	1010: "TransactionNotFound",
	1011: "TransactionStatusError",
}
var CancelTransResponse_CancelTransResponseErrorCode_value = map[string]int32{
	"OK":                     0,
	"EmptyTransUniqId":       1001,
	"TransactionNotFound":    1010,
	"TransactionStatusError": 1011,
}

func (x CancelTransResponse_CancelTransResponseErrorCode) String() string {
	return proto.EnumName(CancelTransResponse_CancelTransResponseErrorCode_name, int32(x))
}
func (CancelTransResponse_CancelTransResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{12, 0}
}

type CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode int32

const (
	CancelTransSuccessResponse_OK                     CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode = 0
	CancelTransSuccessResponse_EmptyTransUniqId       CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode = 1001
	CancelTransSuccessResponse_TransactionNotFound    CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode = 1010
	CancelTransSuccessResponse_TransactionStatusError CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode = 1011
)

var CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode_name = map[int32]string{
	0:    "OK",
	1001: "EmptyTransUniqId",
	1010: "TransactionNotFound",
	1011: "TransactionStatusError",
}
var CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode_value = map[string]int32{
	"OK":                     0,
	"EmptyTransUniqId":       1001,
	"TransactionNotFound":    1010,
	"TransactionStatusError": 1011,
}

func (x CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode) String() string {
	return proto.EnumName(CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode_name, int32(x))
}
func (CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{14, 0}
}

type GetTransResponse_GetTransResponseErrorCode int32

const (
	GetTransResponse_OK GetTransResponse_GetTransResponseErrorCode = 0
	//        InvalidAppId = 1001;
	//        EmptyBusCode = 1002;
	//        EmptyTRXId = 1003;
	GetTransResponse_EmptyTransUniqId GetTransResponse_GetTransResponseErrorCode = 1010
)

var GetTransResponse_GetTransResponseErrorCode_name = map[int32]string{
	0:    "OK",
	1010: "EmptyTransUniqId",
}
var GetTransResponse_GetTransResponseErrorCode_value = map[string]int32{
	"OK":               0,
	"EmptyTransUniqId": 1010,
}

func (x GetTransResponse_GetTransResponseErrorCode) String() string {
	return proto.EnumName(GetTransResponse_GetTransResponseErrorCode_name, int32(x))
}
func (GetTransResponse_GetTransResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{16, 0}
}

type TransactionId struct {
	// Identifier of app
	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	// Business Code
	BusCode string `protobuf:"bytes,2,opt,name=busCode,proto3" json:"busCode,omitempty"`
	// Business transactionId
	TrxId string `protobuf:"bytes,3,opt,name=trxId,proto3" json:"trxId,omitempty"`
}

func (m *TransactionId) Reset()                    { *m = TransactionId{} }
func (m *TransactionId) String() string            { return proto.CompactTextString(m) }
func (*TransactionId) ProtoMessage()               {}
func (*TransactionId) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{0} }

func (m *TransactionId) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *TransactionId) GetBusCode() string {
	if m != nil {
		return m.BusCode
	}
	return ""
}

func (m *TransactionId) GetTrxId() string {
	if m != nil {
		return m.TrxId
	}
	return ""
}

type TransactionStep struct {
	StepId            string   `protobuf:"bytes,1,opt,name=stepId,proto3" json:"stepId,omitempty"`
	Args              [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	ServerName        string   `protobuf:"bytes,3,opt,name=serverName,proto3" json:"serverName,omitempty"`
	ServiceName       string   `protobuf:"bytes,4,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ConfirmMethodName string   `protobuf:"bytes,5,opt,name=confirmMethodName,proto3" json:"confirmMethodName,omitempty"`
	CancelMethodName  string   `protobuf:"bytes,6,opt,name=cancelMethodName,proto3" json:"cancelMethodName,omitempty"`
	ClientName        string   `protobuf:"bytes,7,opt,name=clientName,proto3" json:"clientName,omitempty"`
}

func (m *TransactionStep) Reset()                    { *m = TransactionStep{} }
func (m *TransactionStep) String() string            { return proto.CompactTextString(m) }
func (*TransactionStep) ProtoMessage()               {}
func (*TransactionStep) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{1} }

func (m *TransactionStep) GetStepId() string {
	if m != nil {
		return m.StepId
	}
	return ""
}

func (m *TransactionStep) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TransactionStep) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TransactionStep) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *TransactionStep) GetConfirmMethodName() string {
	if m != nil {
		return m.ConfirmMethodName
	}
	return ""
}

func (m *TransactionStep) GetCancelMethodName() string {
	if m != nil {
		return m.CancelMethodName
	}
	return ""
}

func (m *TransactionStep) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type Transaction struct {
	TransactionId *TransactionId                `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
	TransUniqId   string                        `protobuf:"bytes,2,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
	Steps         []*TransactionStep            `protobuf:"bytes,3,rep,name=steps" json:"steps,omitempty"`
	Status        Transaction_TransactionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=softtrans.coordinator.tcc.Transaction_TransactionStatus" json:"status,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{2} }

func (m *Transaction) GetTransactionId() *TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *Transaction) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

func (m *Transaction) GetSteps() []*TransactionStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Transaction) GetStatus() Transaction_TransactionStatus {
	if m != nil {
		return m.Status
	}
	return Transaction_Trying
}

type BeginTransRequest struct {
	TransactionId *TransactionId `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
	// 为true时，如果协调器发现已经有相同TransactionId的事务存在，将返回错误 DuplicateRequest
	// 为false时，如果协调器发现已经有相同TransactionId的事务存在，将返回已经存在的事务
	FailFast bool `protobuf:"varint,2,opt,name=failFast,proto3" json:"failFast,omitempty"`
	// 事务过期时长(单位:秒)
	ExpireTimeSeconds int32 `protobuf:"varint,3,opt,name=expireTimeSeconds,proto3" json:"expireTimeSeconds,omitempty"`
}

func (m *BeginTransRequest) Reset()                    { *m = BeginTransRequest{} }
func (m *BeginTransRequest) String() string            { return proto.CompactTextString(m) }
func (*BeginTransRequest) ProtoMessage()               {}
func (*BeginTransRequest) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{3} }

func (m *BeginTransRequest) GetTransactionId() *TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *BeginTransRequest) GetFailFast() bool {
	if m != nil {
		return m.FailFast
	}
	return false
}

func (m *BeginTransRequest) GetExpireTimeSeconds() int32 {
	if m != nil {
		return m.ExpireTimeSeconds
	}
	return 0
}

type BeginTransResponse struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *BeginTransResponse) Reset()                    { *m = BeginTransResponse{} }
func (m *BeginTransResponse) String() string            { return proto.CompactTextString(m) }
func (*BeginTransResponse) ProtoMessage()               {}
func (*BeginTransResponse) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{4} }

func (m *BeginTransResponse) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type TryStepRequest struct {
	TransUniqId string           `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
	Step        *TransactionStep `protobuf:"bytes,2,opt,name=step" json:"step,omitempty"`
}

func (m *TryStepRequest) Reset()                    { *m = TryStepRequest{} }
func (m *TryStepRequest) String() string            { return proto.CompactTextString(m) }
func (*TryStepRequest) ProtoMessage()               {}
func (*TryStepRequest) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{5} }

func (m *TryStepRequest) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

func (m *TryStepRequest) GetStep() *TransactionStep {
	if m != nil {
		return m.Step
	}
	return nil
}

type TryStepResponse struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
	StepId      string `protobuf:"bytes,2,opt,name=stepId,proto3" json:"stepId,omitempty"`
}

func (m *TryStepResponse) Reset()                    { *m = TryStepResponse{} }
func (m *TryStepResponse) String() string            { return proto.CompactTextString(m) }
func (*TryStepResponse) ProtoMessage()               {}
func (*TryStepResponse) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{6} }

func (m *TryStepResponse) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

func (m *TryStepResponse) GetStepId() string {
	if m != nil {
		return m.StepId
	}
	return ""
}

type ConfirmTransRequest struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *ConfirmTransRequest) Reset()         { *m = ConfirmTransRequest{} }
func (m *ConfirmTransRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmTransRequest) ProtoMessage()    {}
func (*ConfirmTransRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{7}
}

func (m *ConfirmTransRequest) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type ConfirmTransResponse struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *ConfirmTransResponse) Reset()         { *m = ConfirmTransResponse{} }
func (m *ConfirmTransResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmTransResponse) ProtoMessage()    {}
func (*ConfirmTransResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{8}
}

func (m *ConfirmTransResponse) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type ConfirmTransSuccessRequest struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *ConfirmTransSuccessRequest) Reset()         { *m = ConfirmTransSuccessRequest{} }
func (m *ConfirmTransSuccessRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmTransSuccessRequest) ProtoMessage()    {}
func (*ConfirmTransSuccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{9}
}

func (m *ConfirmTransSuccessRequest) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type ConfirmTransSuccessResponse struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *ConfirmTransSuccessResponse) Reset()         { *m = ConfirmTransSuccessResponse{} }
func (m *ConfirmTransSuccessResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmTransSuccessResponse) ProtoMessage()    {}
func (*ConfirmTransSuccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{10}
}

func (m *ConfirmTransSuccessResponse) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type CancelTransRequest struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *CancelTransRequest) Reset()         { *m = CancelTransRequest{} }
func (m *CancelTransRequest) String() string { return proto.CompactTextString(m) }
func (*CancelTransRequest) ProtoMessage()    {}
func (*CancelTransRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{11}
}

func (m *CancelTransRequest) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type CancelTransResponse struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *CancelTransResponse) Reset()         { *m = CancelTransResponse{} }
func (m *CancelTransResponse) String() string { return proto.CompactTextString(m) }
func (*CancelTransResponse) ProtoMessage()    {}
func (*CancelTransResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{12}
}

func (m *CancelTransResponse) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type CancelTransSuccessRequest struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *CancelTransSuccessRequest) Reset()         { *m = CancelTransSuccessRequest{} }
func (m *CancelTransSuccessRequest) String() string { return proto.CompactTextString(m) }
func (*CancelTransSuccessRequest) ProtoMessage()    {}
func (*CancelTransSuccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{13}
}

func (m *CancelTransSuccessRequest) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type CancelTransSuccessResponse struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *CancelTransSuccessResponse) Reset()         { *m = CancelTransSuccessResponse{} }
func (m *CancelTransSuccessResponse) String() string { return proto.CompactTextString(m) }
func (*CancelTransSuccessResponse) ProtoMessage()    {}
func (*CancelTransSuccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{14}
}

func (m *CancelTransSuccessResponse) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type GetTransRequest struct {
	TransUniqId string `protobuf:"bytes,1,opt,name=transUniqId,proto3" json:"transUniqId,omitempty"`
}

func (m *GetTransRequest) Reset()                    { *m = GetTransRequest{} }
func (m *GetTransRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransRequest) ProtoMessage()               {}
func (*GetTransRequest) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{15} }

func (m *GetTransRequest) GetTransUniqId() string {
	if m != nil {
		return m.TransUniqId
	}
	return ""
}

type GetTransResponse struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *GetTransResponse) Reset()                    { *m = GetTransResponse{} }
func (m *GetTransResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransResponse) ProtoMessage()               {}
func (*GetTransResponse) Descriptor() ([]byte, []int) { return fileDescriptorTccCoordinator, []int{16} }

func (m *GetTransResponse) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type GetExpiredTransListRequest struct {
	TopN int32 `protobuf:"varint,1,opt,name=topN,proto3" json:"topN,omitempty"`
}

func (m *GetExpiredTransListRequest) Reset()         { *m = GetExpiredTransListRequest{} }
func (m *GetExpiredTransListRequest) String() string { return proto.CompactTextString(m) }
func (*GetExpiredTransListRequest) ProtoMessage()    {}
func (*GetExpiredTransListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{17}
}

func (m *GetExpiredTransListRequest) GetTopN() int32 {
	if m != nil {
		return m.TopN
	}
	return 0
}

type GetExpiredTransListResponse struct {
	TransUniqIds []string `protobuf:"bytes,1,rep,name=transUniqIds" json:"transUniqIds,omitempty"`
}

func (m *GetExpiredTransListResponse) Reset()         { *m = GetExpiredTransListResponse{} }
func (m *GetExpiredTransListResponse) String() string { return proto.CompactTextString(m) }
func (*GetExpiredTransListResponse) ProtoMessage()    {}
func (*GetExpiredTransListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{18}
}

func (m *GetExpiredTransListResponse) GetTransUniqIds() []string {
	if m != nil {
		return m.TransUniqIds
	}
	return nil
}

type GetConfirmingTransListRequest struct {
	TopN int32 `protobuf:"varint,1,opt,name=topN,proto3" json:"topN,omitempty"`
}

func (m *GetConfirmingTransListRequest) Reset()         { *m = GetConfirmingTransListRequest{} }
func (m *GetConfirmingTransListRequest) String() string { return proto.CompactTextString(m) }
func (*GetConfirmingTransListRequest) ProtoMessage()    {}
func (*GetConfirmingTransListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{19}
}

func (m *GetConfirmingTransListRequest) GetTopN() int32 {
	if m != nil {
		return m.TopN
	}
	return 0
}

type GetConfirmingTransListResponse struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetConfirmingTransListResponse) Reset()         { *m = GetConfirmingTransListResponse{} }
func (m *GetConfirmingTransListResponse) String() string { return proto.CompactTextString(m) }
func (*GetConfirmingTransListResponse) ProtoMessage()    {}
func (*GetConfirmingTransListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{20}
}

func (m *GetConfirmingTransListResponse) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetCancellingTransListRequest struct {
	TopN int32 `protobuf:"varint,1,opt,name=topN,proto3" json:"topN,omitempty"`
}

func (m *GetCancellingTransListRequest) Reset()         { *m = GetCancellingTransListRequest{} }
func (m *GetCancellingTransListRequest) String() string { return proto.CompactTextString(m) }
func (*GetCancellingTransListRequest) ProtoMessage()    {}
func (*GetCancellingTransListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{21}
}

func (m *GetCancellingTransListRequest) GetTopN() int32 {
	if m != nil {
		return m.TopN
	}
	return 0
}

type GetCancellingTransListResponse struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetCancellingTransListResponse) Reset()         { *m = GetCancellingTransListResponse{} }
func (m *GetCancellingTransListResponse) String() string { return proto.CompactTextString(m) }
func (*GetCancellingTransListResponse) ProtoMessage()    {}
func (*GetCancellingTransListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{22}
}

func (m *GetCancellingTransListResponse) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type RMConfirmTransRequest struct {
	TransactionId *TransactionId   `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
	Step          *TransactionStep `protobuf:"bytes,2,opt,name=step" json:"step,omitempty"`
}

func (m *RMConfirmTransRequest) Reset()         { *m = RMConfirmTransRequest{} }
func (m *RMConfirmTransRequest) String() string { return proto.CompactTextString(m) }
func (*RMConfirmTransRequest) ProtoMessage()    {}
func (*RMConfirmTransRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{23}
}

func (m *RMConfirmTransRequest) GetTransactionId() *TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *RMConfirmTransRequest) GetStep() *TransactionStep {
	if m != nil {
		return m.Step
	}
	return nil
}

type RMConfirmTransResponse struct {
	TransactionId *TransactionId `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
	StepId        string         `protobuf:"bytes,2,opt,name=stepId,proto3" json:"stepId,omitempty"`
}

func (m *RMConfirmTransResponse) Reset()         { *m = RMConfirmTransResponse{} }
func (m *RMConfirmTransResponse) String() string { return proto.CompactTextString(m) }
func (*RMConfirmTransResponse) ProtoMessage()    {}
func (*RMConfirmTransResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{24}
}

func (m *RMConfirmTransResponse) GetTransactionId() *TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *RMConfirmTransResponse) GetStepId() string {
	if m != nil {
		return m.StepId
	}
	return ""
}

type RMCancelTransRequest struct {
	TransactionId *TransactionId   `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
	Step          *TransactionStep `protobuf:"bytes,2,opt,name=step" json:"step,omitempty"`
}

func (m *RMCancelTransRequest) Reset()         { *m = RMCancelTransRequest{} }
func (m *RMCancelTransRequest) String() string { return proto.CompactTextString(m) }
func (*RMCancelTransRequest) ProtoMessage()    {}
func (*RMCancelTransRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{25}
}

func (m *RMCancelTransRequest) GetTransactionId() *TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *RMCancelTransRequest) GetStep() *TransactionStep {
	if m != nil {
		return m.Step
	}
	return nil
}

type RMCancelTransResponse struct {
	TransactionId *TransactionId `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
	StepId        string         `protobuf:"bytes,2,opt,name=stepId,proto3" json:"stepId,omitempty"`
}

func (m *RMCancelTransResponse) Reset()         { *m = RMCancelTransResponse{} }
func (m *RMCancelTransResponse) String() string { return proto.CompactTextString(m) }
func (*RMCancelTransResponse) ProtoMessage()    {}
func (*RMCancelTransResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTccCoordinator, []int{26}
}

func (m *RMCancelTransResponse) GetTransactionId() *TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *RMCancelTransResponse) GetStepId() string {
	if m != nil {
		return m.StepId
	}
	return ""
}

func init() {
	proto.RegisterType((*TransactionId)(nil), "softtrans.coordinator.tcc.TransactionId")
	proto.RegisterType((*TransactionStep)(nil), "softtrans.coordinator.tcc.TransactionStep")
	proto.RegisterType((*Transaction)(nil), "softtrans.coordinator.tcc.Transaction")
	proto.RegisterType((*BeginTransRequest)(nil), "softtrans.coordinator.tcc.BeginTransRequest")
	proto.RegisterType((*BeginTransResponse)(nil), "softtrans.coordinator.tcc.BeginTransResponse")
	proto.RegisterType((*TryStepRequest)(nil), "softtrans.coordinator.tcc.TryStepRequest")
	proto.RegisterType((*TryStepResponse)(nil), "softtrans.coordinator.tcc.TryStepResponse")
	proto.RegisterType((*ConfirmTransRequest)(nil), "softtrans.coordinator.tcc.ConfirmTransRequest")
	proto.RegisterType((*ConfirmTransResponse)(nil), "softtrans.coordinator.tcc.ConfirmTransResponse")
	proto.RegisterType((*ConfirmTransSuccessRequest)(nil), "softtrans.coordinator.tcc.ConfirmTransSuccessRequest")
	proto.RegisterType((*ConfirmTransSuccessResponse)(nil), "softtrans.coordinator.tcc.ConfirmTransSuccessResponse")
	proto.RegisterType((*CancelTransRequest)(nil), "softtrans.coordinator.tcc.CancelTransRequest")
	proto.RegisterType((*CancelTransResponse)(nil), "softtrans.coordinator.tcc.CancelTransResponse")
	proto.RegisterType((*CancelTransSuccessRequest)(nil), "softtrans.coordinator.tcc.CancelTransSuccessRequest")
	proto.RegisterType((*CancelTransSuccessResponse)(nil), "softtrans.coordinator.tcc.CancelTransSuccessResponse")
	proto.RegisterType((*GetTransRequest)(nil), "softtrans.coordinator.tcc.GetTransRequest")
	proto.RegisterType((*GetTransResponse)(nil), "softtrans.coordinator.tcc.GetTransResponse")
	proto.RegisterType((*GetExpiredTransListRequest)(nil), "softtrans.coordinator.tcc.GetExpiredTransListRequest")
	proto.RegisterType((*GetExpiredTransListResponse)(nil), "softtrans.coordinator.tcc.GetExpiredTransListResponse")
	proto.RegisterType((*GetConfirmingTransListRequest)(nil), "softtrans.coordinator.tcc.GetConfirmingTransListRequest")
	proto.RegisterType((*GetConfirmingTransListResponse)(nil), "softtrans.coordinator.tcc.GetConfirmingTransListResponse")
	proto.RegisterType((*GetCancellingTransListRequest)(nil), "softtrans.coordinator.tcc.GetCancellingTransListRequest")
	proto.RegisterType((*GetCancellingTransListResponse)(nil), "softtrans.coordinator.tcc.GetCancellingTransListResponse")
	proto.RegisterType((*RMConfirmTransRequest)(nil), "softtrans.coordinator.tcc.RMConfirmTransRequest")
	proto.RegisterType((*RMConfirmTransResponse)(nil), "softtrans.coordinator.tcc.RMConfirmTransResponse")
	proto.RegisterType((*RMCancelTransRequest)(nil), "softtrans.coordinator.tcc.RMCancelTransRequest")
	proto.RegisterType((*RMCancelTransResponse)(nil), "softtrans.coordinator.tcc.RMCancelTransResponse")
	proto.RegisterEnum("softtrans.coordinator.tcc.Transaction_TransactionStatus", Transaction_TransactionStatus_name, Transaction_TransactionStatus_value)
	proto.RegisterEnum("softtrans.coordinator.tcc.BeginTransResponse_BeginTransResponseErrorCode", BeginTransResponse_BeginTransResponseErrorCode_name, BeginTransResponse_BeginTransResponseErrorCode_value)
	proto.RegisterEnum("softtrans.coordinator.tcc.TryStepResponse_TryStepResponseErrorCode", TryStepResponse_TryStepResponseErrorCode_name, TryStepResponse_TryStepResponseErrorCode_value)
	proto.RegisterEnum("softtrans.coordinator.tcc.ConfirmTransResponse_ConfirmTransResponseErrorCode", ConfirmTransResponse_ConfirmTransResponseErrorCode_name, ConfirmTransResponse_ConfirmTransResponseErrorCode_value)
	proto.RegisterEnum("softtrans.coordinator.tcc.ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode", ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode_name, ConfirmTransSuccessResponse_ConfirmTransSuccessResponseErrorCode_value)
	proto.RegisterEnum("softtrans.coordinator.tcc.CancelTransResponse_CancelTransResponseErrorCode", CancelTransResponse_CancelTransResponseErrorCode_name, CancelTransResponse_CancelTransResponseErrorCode_value)
	proto.RegisterEnum("softtrans.coordinator.tcc.CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode", CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode_name, CancelTransSuccessResponse_CancelTransSuccessResponseErrorCode_value)
	proto.RegisterEnum("softtrans.coordinator.tcc.GetTransResponse_GetTransResponseErrorCode", GetTransResponse_GetTransResponseErrorCode_name, GetTransResponse_GetTransResponseErrorCode_value)
}
func (m *TransactionId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.BusCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.BusCode)))
		i += copy(dAtA[i:], m.BusCode)
	}
	if len(m.TrxId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TrxId)))
		i += copy(dAtA[i:], m.TrxId)
	}
	return i, nil
}

func (m *TransactionStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionStep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StepId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.StepId)))
		i += copy(dAtA[i:], m.StepId)
	}
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTccCoordinator(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ServerName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.ServerName)))
		i += copy(dAtA[i:], m.ServerName)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.ConfirmMethodName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.ConfirmMethodName)))
		i += copy(dAtA[i:], m.ConfirmMethodName)
	}
	if len(m.CancelMethodName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.CancelMethodName)))
		i += copy(dAtA[i:], m.CancelMethodName)
	}
	if len(m.ClientName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.ClientName)))
		i += copy(dAtA[i:], m.ClientName)
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TransactionId.Size()))
		n1, err := m.TransactionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	if len(m.Steps) > 0 {
		for _, msg := range m.Steps {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTccCoordinator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *BeginTransRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginTransRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TransactionId.Size()))
		n2, err := m.TransactionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FailFast {
		dAtA[i] = 0x10
		i++
		if m.FailFast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ExpireTimeSeconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.ExpireTimeSeconds))
	}
	return i, nil
}

func (m *BeginTransResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginTransResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *TryStepRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryStepRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	if m.Step != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.Step.Size()))
		n3, err := m.Step.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TryStepResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryStepResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	if len(m.StepId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.StepId)))
		i += copy(dAtA[i:], m.StepId)
	}
	return i, nil
}

func (m *ConfirmTransRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmTransRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *ConfirmTransResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmTransResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *ConfirmTransSuccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmTransSuccessRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *ConfirmTransSuccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmTransSuccessResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *CancelTransRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTransRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *CancelTransResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTransResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *CancelTransSuccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTransSuccessRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *CancelTransSuccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTransSuccessResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *GetTransRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.TransUniqId)))
		i += copy(dAtA[i:], m.TransUniqId)
	}
	return i, nil
}

func (m *GetTransResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.Transaction.Size()))
		n4, err := m.Transaction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GetExpiredTransListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpiredTransListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopN != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TopN))
	}
	return i, nil
}

func (m *GetExpiredTransListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpiredTransListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransUniqIds) > 0 {
		for _, s := range m.TransUniqIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetConfirmingTransListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfirmingTransListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopN != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TopN))
	}
	return i, nil
}

func (m *GetConfirmingTransListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfirmingTransListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTccCoordinator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCancellingTransListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCancellingTransListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopN != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TopN))
	}
	return i, nil
}

func (m *GetCancellingTransListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCancellingTransListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTccCoordinator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RMConfirmTransRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RMConfirmTransRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TransactionId.Size()))
		n5, err := m.TransactionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Step != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.Step.Size()))
		n6, err := m.Step.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *RMConfirmTransResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RMConfirmTransResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TransactionId.Size()))
		n7, err := m.TransactionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.StepId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.StepId)))
		i += copy(dAtA[i:], m.StepId)
	}
	return i, nil
}

func (m *RMCancelTransRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RMCancelTransRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TransactionId.Size()))
		n8, err := m.TransactionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Step != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.Step.Size()))
		n9, err := m.Step.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *RMCancelTransResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RMCancelTransResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(m.TransactionId.Size()))
		n10, err := m.TransactionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.StepId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTccCoordinator(dAtA, i, uint64(len(m.StepId)))
		i += copy(dAtA[i:], m.StepId)
	}
	return i, nil
}

func encodeVarintTccCoordinator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TransactionId) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.BusCode)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.TrxId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *TransactionStep) Size() (n int) {
	var l int
	_ = l
	l = len(m.StepId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovTccCoordinator(uint64(l))
		}
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.ConfirmMethodName)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.CancelMethodName)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.ClientName)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	if m.TransactionId != nil {
		l = m.TransactionId.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	if len(m.Steps) > 0 {
		for _, e := range m.Steps {
			l = e.Size()
			n += 1 + l + sovTccCoordinator(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTccCoordinator(uint64(m.Status))
	}
	return n
}

func (m *BeginTransRequest) Size() (n int) {
	var l int
	_ = l
	if m.TransactionId != nil {
		l = m.TransactionId.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	if m.FailFast {
		n += 2
	}
	if m.ExpireTimeSeconds != 0 {
		n += 1 + sovTccCoordinator(uint64(m.ExpireTimeSeconds))
	}
	return n
}

func (m *BeginTransResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *TryStepRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	if m.Step != nil {
		l = m.Step.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *TryStepResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.StepId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *ConfirmTransRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *ConfirmTransResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *ConfirmTransSuccessRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *ConfirmTransSuccessResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *CancelTransRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *CancelTransResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *CancelTransSuccessRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *CancelTransSuccessResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *GetTransRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransUniqId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *GetTransResponse) Size() (n int) {
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *GetExpiredTransListRequest) Size() (n int) {
	var l int
	_ = l
	if m.TopN != 0 {
		n += 1 + sovTccCoordinator(uint64(m.TopN))
	}
	return n
}

func (m *GetExpiredTransListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.TransUniqIds) > 0 {
		for _, s := range m.TransUniqIds {
			l = len(s)
			n += 1 + l + sovTccCoordinator(uint64(l))
		}
	}
	return n
}

func (m *GetConfirmingTransListRequest) Size() (n int) {
	var l int
	_ = l
	if m.TopN != 0 {
		n += 1 + sovTccCoordinator(uint64(m.TopN))
	}
	return n
}

func (m *GetConfirmingTransListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTccCoordinator(uint64(l))
		}
	}
	return n
}

func (m *GetCancellingTransListRequest) Size() (n int) {
	var l int
	_ = l
	if m.TopN != 0 {
		n += 1 + sovTccCoordinator(uint64(m.TopN))
	}
	return n
}

func (m *GetCancellingTransListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTccCoordinator(uint64(l))
		}
	}
	return n
}

func (m *RMConfirmTransRequest) Size() (n int) {
	var l int
	_ = l
	if m.TransactionId != nil {
		l = m.TransactionId.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	if m.Step != nil {
		l = m.Step.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *RMConfirmTransResponse) Size() (n int) {
	var l int
	_ = l
	if m.TransactionId != nil {
		l = m.TransactionId.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.StepId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *RMCancelTransRequest) Size() (n int) {
	var l int
	_ = l
	if m.TransactionId != nil {
		l = m.TransactionId.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	if m.Step != nil {
		l = m.Step.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func (m *RMCancelTransResponse) Size() (n int) {
	var l int
	_ = l
	if m.TransactionId != nil {
		l = m.TransactionId.Size()
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	l = len(m.StepId)
	if l > 0 {
		n += 1 + l + sovTccCoordinator(uint64(l))
	}
	return n
}

func sovTccCoordinator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTccCoordinator(x uint64) (n int) {
	return sovTccCoordinator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionStep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionStep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StepId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmMethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmMethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelMethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelMethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionId == nil {
				m.TransactionId = &TransactionId{}
			}
			if err := m.TransactionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steps = append(m.Steps, &TransactionStep{})
			if err := m.Steps[len(m.Steps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Transaction_TransactionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginTransRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginTransRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginTransRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionId == nil {
				m.TransactionId = &TransactionId{}
			}
			if err := m.TransactionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailFast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailFast = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTimeSeconds", wireType)
			}
			m.ExpireTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTimeSeconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginTransResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginTransResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginTransResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryStepRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryStepRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryStepRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Step == nil {
				m.Step = &TransactionStep{}
			}
			if err := m.Step.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryStepResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryStepResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryStepResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StepId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmTransRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmTransRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmTransRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmTransResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmTransResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmTransResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmTransSuccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmTransSuccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmTransSuccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmTransSuccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmTransSuccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmTransSuccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTransRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTransRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTransRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTransResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTransResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTransResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTransSuccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTransSuccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTransSuccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTransSuccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTransSuccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTransSuccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpiredTransListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpiredTransListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpiredTransListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			m.TopN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopN |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpiredTransListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpiredTransListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpiredTransListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransUniqIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransUniqIds = append(m.TransUniqIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfirmingTransListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfirmingTransListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfirmingTransListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			m.TopN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopN |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfirmingTransListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfirmingTransListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfirmingTransListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCancellingTransListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCancellingTransListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCancellingTransListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			m.TopN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopN |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCancellingTransListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCancellingTransListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCancellingTransListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RMConfirmTransRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RMConfirmTransRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RMConfirmTransRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionId == nil {
				m.TransactionId = &TransactionId{}
			}
			if err := m.TransactionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Step == nil {
				m.Step = &TransactionStep{}
			}
			if err := m.Step.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RMConfirmTransResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RMConfirmTransResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RMConfirmTransResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionId == nil {
				m.TransactionId = &TransactionId{}
			}
			if err := m.TransactionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StepId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RMCancelTransRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RMCancelTransRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RMCancelTransRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionId == nil {
				m.TransactionId = &TransactionId{}
			}
			if err := m.TransactionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Step == nil {
				m.Step = &TransactionStep{}
			}
			if err := m.Step.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RMCancelTransResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RMCancelTransResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RMCancelTransResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionId == nil {
				m.TransactionId = &TransactionId{}
			}
			if err := m.TransactionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StepId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTccCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTccCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTccCoordinator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTccCoordinator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTccCoordinator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTccCoordinator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTccCoordinator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTccCoordinator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTccCoordinator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTccCoordinator   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tcc_coordinator.proto", fileDescriptorTccCoordinator) }

var fileDescriptorTccCoordinator = []byte{
	// 1189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xdf, 0xe9, 0x9f, 0xb8, 0x7d, 0xfd, 0xe7, 0x4e, 0xff, 0x28, 0x75, 0xd9, 0x28, 0x32, 0x08,
	0x85, 0xb2, 0x64, 0x4b, 0xca, 0x2e, 0x0b, 0x12, 0x2b, 0xb6, 0xa1, 0x5b, 0x02, 0xb4, 0x20, 0x37,
	0x2b, 0x21, 0x24, 0x04, 0x5e, 0x7b, 0x5a, 0x2c, 0x52, 0x4f, 0xd6, 0x9e, 0xac, 0xb6, 0x02, 0x09,
	0x90, 0x10, 0x37, 0x24, 0x8e, 0x7c, 0x02, 0x38, 0xa0, 0x15, 0x1f, 0x00, 0x71, 0xe7, 0x06, 0x07,
	0x3e, 0x00, 0x2a, 0x27, 0xe0, 0x56, 0x2e, 0x70, 0x43, 0x1e, 0x4f, 0x36, 0xe3, 0xd8, 0x71, 0x27,
	0x4b, 0x8b, 0xb8, 0x65, 0x66, 0xde, 0xef, 0xbd, 0xf7, 0xfb, 0xbd, 0xe7, 0x79, 0xd3, 0xc2, 0x12,
	0x73, 0x9c, 0x77, 0x1c, 0x4a, 0x03, 0xd7, 0xf3, 0x6d, 0x46, 0x83, 0x6a, 0x3b, 0xa0, 0x8c, 0xe2,
	0x95, 0x90, 0xee, 0x33, 0x16, 0xd8, 0x7e, 0x58, 0x95, 0x0f, 0x99, 0xe3, 0x98, 0xb7, 0x60, 0xa6,
	0x19, 0x1d, 0xd8, 0x0e, 0xf3, 0xa8, 0xdf, 0x70, 0xf1, 0x22, 0x8c, 0xdb, 0xed, 0x76, 0xc3, 0x2d,
	0xa2, 0x32, 0xaa, 0x4c, 0x5a, 0xf1, 0x02, 0x17, 0x41, 0xbb, 0xdd, 0x09, 0xeb, 0xd4, 0x25, 0xc5,
	0x11, 0xbe, 0xdf, 0x5d, 0x46, 0xf6, 0x2c, 0xb8, 0xd7, 0x70, 0x8b, 0xa3, 0xb1, 0x3d, 0x5f, 0x98,
	0x7f, 0x23, 0x98, 0x93, 0xfc, 0xee, 0x31, 0xd2, 0xc6, 0xcb, 0x50, 0x08, 0x19, 0xe9, 0xb9, 0x16,
	0x2b, 0x8c, 0x61, 0xcc, 0x0e, 0x0e, 0xc2, 0xe2, 0x48, 0x79, 0xb4, 0x32, 0x6d, 0xf1, 0xdf, 0xb8,
	0x04, 0x10, 0x92, 0xe0, 0x2e, 0x09, 0x76, 0xed, 0x43, 0x22, 0x5c, 0x4b, 0x3b, 0xb8, 0x0c, 0x53,
	0xd1, 0xca, 0x73, 0x08, 0x37, 0x18, 0xe3, 0x06, 0xf2, 0x16, 0xbe, 0x04, 0xf3, 0x0e, 0xf5, 0xf7,
	0xbd, 0xe0, 0x70, 0x87, 0xb0, 0xf7, 0xa8, 0xcb, 0xed, 0xc6, 0xb9, 0x5d, 0xfa, 0x00, 0xaf, 0x81,
	0xee, 0xd8, 0xbe, 0x43, 0x5a, 0x92, 0x71, 0x81, 0x1b, 0xa7, 0xf6, 0xa3, 0xdc, 0x9c, 0x96, 0x47,
	0x7c, 0xc6, 0xad, 0xb4, 0x38, 0xb7, 0xde, 0x8e, 0x79, 0x32, 0x02, 0x53, 0x12, 0x77, 0xbc, 0x0b,
	0x33, 0x4c, 0x96, 0x98, 0xd3, 0x9f, 0xaa, 0x55, 0xaa, 0x03, 0xab, 0x52, 0x4d, 0x94, 0xc4, 0x4a,
	0xc2, 0x23, 0xee, 0x7c, 0xe3, 0x96, 0xef, 0xdd, 0x69, 0xb8, 0xa2, 0x1e, 0xf2, 0x16, 0x7e, 0x11,
	0xc6, 0x23, 0x6d, 0xc3, 0xe2, 0x68, 0x79, 0xb4, 0x32, 0x55, 0x5b, 0x53, 0x8b, 0x14, 0x15, 0xc9,
	0x8a, 0x81, 0xf8, 0x8d, 0xa8, 0x56, 0x36, 0xeb, 0x84, 0x5c, 0xda, 0xd9, 0xda, 0x35, 0x35, 0x17,
	0x49, 0x77, 0x11, 0xde, 0x12, 0x7e, 0xcc, 0xb7, 0x61, 0x3e, 0x75, 0x88, 0x01, 0x0a, 0xcd, 0xe0,
	0xc8, 0xf3, 0x0f, 0xf4, 0x0b, 0x78, 0x16, 0xa0, 0x1e, 0xd7, 0x25, 0x5a, 0x03, 0x9e, 0x81, 0x49,
	0xb1, 0x26, 0xae, 0xbe, 0xc8, 0x8f, 0x79, 0x25, 0x5a, 0xd1, 0x71, 0x89, 0x1f, 0xc7, 0x6b, 0xe2,
	0xea, 0x15, 0xf3, 0x3e, 0x82, 0xf9, 0x4d, 0x72, 0xe0, 0xf9, 0x3c, 0x88, 0x45, 0xee, 0x74, 0x48,
	0xc8, 0xce, 0x5c, 0x7a, 0x03, 0x26, 0xf6, 0x6d, 0xaf, 0x75, 0xd3, 0x0e, 0x19, 0xd7, 0x7d, 0xc2,
	0x7a, 0xb0, 0x8e, 0x1a, 0x8e, 0xdc, 0x6b, 0x7b, 0x01, 0x69, 0x7a, 0x87, 0x64, 0x8f, 0x38, 0xd4,
	0x77, 0x43, 0xde, 0xb9, 0xe3, 0x56, 0xfa, 0xc0, 0xfc, 0x06, 0x01, 0x96, 0xf3, 0x0d, 0xdb, 0xd4,
	0x0f, 0x49, 0x7f, 0x6d, 0x51, 0xaa, 0xb6, 0x66, 0x08, 0xab, 0x69, 0xdc, 0x56, 0x10, 0xd0, 0x80,
	0x7f, 0x8e, 0x05, 0x18, 0x79, 0xfd, 0x55, 0xfd, 0x02, 0x9e, 0x87, 0xe9, 0x86, 0x7f, 0xd7, 0x6e,
	0x79, 0xee, 0x8d, 0xe8, 0x03, 0xd6, 0x7f, 0xd3, 0xa2, 0xad, 0xad, 0xc3, 0x36, 0x3b, 0xda, 0x8c,
	0xbf, 0x5c, 0xfd, 0x77, 0x0d, 0xcf, 0x01, 0xf0, 0xad, 0xa6, 0xf5, 0x66, 0xc3, 0xd5, 0xff, 0xd0,
	0xf0, 0x12, 0xe8, 0x2f, 0x75, 0xda, 0x2d, 0xcf, 0xb1, 0x19, 0x11, 0x22, 0xea, 0x27, 0x9a, 0x19,
	0xc0, 0x6c, 0x33, 0x38, 0xe2, 0x0d, 0x22, 0x94, 0x3d, 0x35, 0x51, 0x7c, 0x1d, 0xc6, 0xa2, 0x5e,
	0xe2, 0x3a, 0x0d, 0xd7, 0x83, 0x1c, 0x67, 0xfe, 0xcc, 0xaf, 0x10, 0x11, 0x54, 0x55, 0x1e, 0xe9,
	0x92, 0x19, 0x91, 0x2f, 0x19, 0xf3, 0x33, 0x04, 0xc5, 0x3e, 0x6f, 0x69, 0xd1, 0x96, 0x40, 0x8f,
	0xe5, 0xe8, 0x39, 0x8c, 0x84, 0x5b, 0x84, 0x39, 0xa1, 0x65, 0x04, 0x6f, 0xf8, 0xfb, 0x34, 0xd2,
	0xae, 0x08, 0x0b, 0x52, 0xe2, 0xbb, 0x94, 0xdd, 0xa4, 0x1d, 0xdf, 0xd5, 0x4f, 0x34, 0xbc, 0x0a,
	0xcb, 0xa9, 0x56, 0xe7, 0xc1, 0xf4, 0x3f, 0x35, 0xf3, 0x59, 0x58, 0x10, 0x6d, 0x9d, 0xe8, 0xd4,
	0xd3, 0x0b, 0xff, 0x2d, 0x82, 0xc5, 0x24, 0x52, 0xb9, 0x67, 0x3a, 0x70, 0x31, 0x0b, 0xa9, 0x2c,
	0xc0, 0x43, 0x52, 0xbd, 0x0e, 0x86, 0x1c, 0x76, 0xaf, 0xe3, 0x38, 0x24, 0x1c, 0x82, 0xf1, 0xf7,
	0x08, 0x56, 0x33, 0x1d, 0x28, 0x13, 0xff, 0x10, 0x1e, 0xcb, 0x71, 0x70, 0xde, 0xfc, 0xaf, 0x02,
	0x8e, 0xaf, 0xa8, 0x21, 0x2b, 0x7d, 0x1f, 0xc1, 0x42, 0x02, 0xa8, 0xcc, 0x97, 0xc1, 0x23, 0x19,
	0xc0, 0xf3, 0xe6, 0xf9, 0x02, 0xac, 0x48, 0x51, 0x87, 0x2e, 0xf3, 0x77, 0x08, 0x8c, 0x2c, 0xbc,
	0x32, 0xeb, 0x0f, 0xe0, 0xd1, 0xc1, 0xf8, 0xf3, 0x26, 0xbf, 0x01, 0x73, 0xdb, 0x84, 0x0d, 0x59,
	0xe1, 0x2f, 0x11, 0xe8, 0x3d, 0x94, 0x20, 0xfa, 0xb2, 0x80, 0xc5, 0x61, 0xc4, 0xa8, 0x7a, 0x5c,
	0xed, 0xde, 0xb4, 0x64, 0xa8, 0xf9, 0x3c, 0xac, 0xf4, 0x7b, 0x57, 0x93, 0xe1, 0x44, 0x33, 0xd7,
	0xc1, 0xd8, 0x26, 0x6c, 0x8b, 0x0f, 0x2c, 0x97, 0x9f, 0xbd, 0xe6, 0x85, 0xac, 0x4b, 0x0d, 0xc3,
	0x18, 0xa3, 0xed, 0x5d, 0x9e, 0xdc, 0xb8, 0xc5, 0x7f, 0x9b, 0x37, 0x60, 0x35, 0x13, 0x21, 0x68,
	0x99, 0x30, 0x2d, 0x51, 0x0f, 0x8b, 0xa8, 0x3c, 0x5a, 0x99, 0xb4, 0x12, 0x7b, 0xe6, 0x06, 0x5c,
	0xdc, 0x26, 0xac, 0x37, 0xfe, 0x95, 0xe2, 0xb6, 0xa0, 0x34, 0x08, 0x24, 0x42, 0xbf, 0x22, 0x42,
	0xc7, 0xb2, 0xc4, 0xa1, 0xd5, 0x25, 0x4d, 0x60, 0xbb, 0x29, 0x3e, 0x78, 0x82, 0x0c, 0x93, 0x62,
	0x16, 0xe8, 0x1c, 0x52, 0xfc, 0x1a, 0xc1, 0x92, 0xb5, 0x93, 0x35, 0x5d, 0xce, 0xfa, 0x1d, 0xf4,
	0x6f, 0x67, 0xfb, 0xc7, 0x08, 0x96, 0xfb, 0x33, 0x15, 0x82, 0x9c, 0x75, 0xaa, 0x83, 0x1e, 0x04,
	0x5f, 0x21, 0x58, 0xb4, 0x76, 0x32, 0xee, 0xe7, 0xff, 0x9b, 0x56, 0x1f, 0xf1, 0xa2, 0x66, 0x8c,
	0x83, 0xff, 0x48, 0xa9, 0xda, 0x8f, 0x93, 0x00, 0xcd, 0x7a, 0x7d, 0x2f, 0xfe, 0xe3, 0x0a, 0x7b,
	0x00, 0xbd, 0x07, 0x28, 0xbe, 0x94, 0x13, 0x2d, 0xf5, 0x1e, 0x37, 0x9e, 0x52, 0xb4, 0x16, 0x0c,
	0xdf, 0x05, 0x4d, 0xbc, 0xd9, 0xf0, 0x13, 0xb9, 0xac, 0xe4, 0xa7, 0xa9, 0xb1, 0xa6, 0x62, 0x2a,
	0x22, 0x50, 0x98, 0x96, 0xbb, 0x10, 0x57, 0x73, 0xb0, 0x19, 0x1f, 0x96, 0x71, 0x59, 0xd9, 0x5e,
	0x04, 0xfc, 0x14, 0x25, 0xdf, 0x7f, 0x62, 0x5a, 0xe1, 0x2b, 0x8a, 0x8e, 0x92, 0xd3, 0xd5, 0xb8,
	0x3a, 0x2c, 0x4c, 0xa4, 0xd1, 0x82, 0x29, 0xa9, 0xa5, 0x70, 0x5e, 0x5d, 0xd2, 0x9f, 0x88, 0x51,
	0x55, 0x35, 0x17, 0xd1, 0x3e, 0x41, 0x89, 0x97, 0x50, 0x97, 0xf3, 0x33, 0x6a, 0x6e, 0xfa, 0x28,
	0x5f, 0x19, 0x12, 0x25, 0x72, 0x70, 0x60, 0xa2, 0x3b, 0x13, 0x71, 0x5e, 0x87, 0xf4, 0x0d, 0x73,
	0xe3, 0x49, 0x25, 0x5b, 0xa9, 0xba, 0x19, 0xb3, 0x30, 0xb7, 0xba, 0x83, 0xa7, 0x6d, 0x6e, 0x75,
	0xf3, 0x46, 0xee, 0xe7, 0x08, 0x96, 0xb3, 0x47, 0x23, 0xbe, 0x96, 0xef, 0x72, 0xf0, 0x08, 0x36,
	0x9e, 0x7b, 0x08, 0x64, 0x5f, 0x3e, 0xe9, 0x39, 0x78, 0x6a, 0x3e, 0x03, 0xe7, 0xed, 0xa9, 0xf9,
	0x0c, 0x1e, 0xba, 0xb5, 0xbf, 0x10, 0xac, 0x34, 0xeb, 0x75, 0x8b, 0x84, 0xb4, 0x13, 0x38, 0x64,
	0xc7, 0xf6, 0xed, 0x03, 0x12, 0x74, 0x2f, 0x38, 0x1f, 0x34, 0x41, 0x06, 0xaf, 0xe7, 0xc4, 0xc8,
	0x9c, 0xb4, 0xc6, 0xd3, 0x43, 0x20, 0x84, 0x3a, 0xef, 0x43, 0x21, 0x4e, 0x16, 0x5f, 0xce, 0x07,
	0xa7, 0x3f, 0xc4, 0x75, 0x75, 0x40, 0x1c, 0x6c, 0xd3, 0xf8, 0xe1, 0xb8, 0x84, 0x7e, 0x3a, 0x2e,
	0xa1, 0x5f, 0x8e, 0x4b, 0xe8, 0x8b, 0x5f, 0x4b, 0x17, 0xde, 0x9a, 0x70, 0xa8, 0xcf, 0x02, 0xdb,
	0x61, 0xb7, 0x0b, 0xfc, 0xbf, 0x85, 0x1b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xf5, 0x14,
	0x63, 0x46, 0x14, 0x00, 0x00,
}
